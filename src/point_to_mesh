import psh
import numpy as np
import trimesh
from collections import namedtuple

voxel_data=namedtuple("VoxelData",["voxel_id","triangle_ids"])
def query_point(hashmap,point,minimums,spacing):
    return hashmap[((point-minimums)//spacing).astype(np.uint64)]
#make a voxel grid covering the mesh
spacing=0.005#half cm grid spacing
mesh=trimesh.load("~/catkin_ws/src/EDKC/HingeAssets/AsMachinedCorrectedInertiaSimplified/hinge_base.STL")
gridpoints=mesh.bounding_box.sample_grid(step=spacing)
minimums=np.min(gridpoints,0)
integer_positions=((gridpoints-minimums)//spacing).astype(np.uint64)
domain_width=np.max(integer_positions)
data=[]

#compute which triangles of the mesh intersect each voxel
collision_manager=trimesh.collision.CollisionManager()
collision_manager.add_object("mesh",mesh)
voxel=trimesh.primitives.Box(spacing*np.ones((3,)),np.eye(4))
intersecting_voxels=set()
for i,pt in enumerate(gridpoints):
    #get all triangles that intersect the voxel
    tf=np.eye(4)
    tf[:3,3]=pt
    intersects,contacts=collision_manager.in_collision_single(voxel,transform=tf,return_data=True)
    if intersects:
        element=psh.data_tuple(integer_positions[i],voxel_data(i,tuple(cd.index("mesh") for cd in contacts)))
        data.append(element)
        intersecting_voxels.add(i)

#store voxels with non-empty intersections in hashmap
hashmap=psh.PerfectSpatialHashMap(data,3,domain_width,0)

#test that query points inside the voxel are mapped to the correct voxel
n_test_pts=5
rng=np.random.default_rng(0)
imaginary_pts=[]
missing_pts=[]
wrong_pts=[]
for i,pt in enumerate(gridpoints):
    lambdas=rng.uniform(size=(n_test_pts,3))
    sample_points=(lambdas-.5)*spacing+pt
    for j in range(n_test_pts):
        try:
            element=query_point(hashmap,sample_points[j],minimums,spacing)
        except KeyError:
            if i in intersecting_voxels:
                missing_pts.append(sample_points[j])
            element=None
        if element is not None:
            if i not in intersecting_voxels:
                #imaginary point appeared
                imaginary_pts.append(sample_points[j])
            elif element.contents.voxel_id!=i:
                #mapped to wrong voxel!
                wrong_pts.append(sample_points[j])
print("missing ("+str(len(missing_pts))+"): ")
print(missing_pts)
print("Extra ("+str(len(imaginary_pts))+"): ")
print(imaginary_pts)
print("Wrong ("+str(len(wrong_pts))+"): ")
print(wrong_pts)